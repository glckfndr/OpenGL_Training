#version 430

layout( local_size_x = 1000 ) in;

uniform float Gravity1 = 1200.0;
uniform vec3 BlackHolePos1 = vec3(3,0,0);

uniform float Gravity2 = 1150.0;
uniform vec3 BlackHolePos2 = vec3(-2,0,0);

uniform float Gravity3 = 800.0;
uniform vec3 BlackHolePos3 = vec3(3,0,0);

uniform float ParticleMass = 10;
float ParticleInvMass = 1.0 / ParticleMass;
uniform float DeltaT = 0.00;
uniform float MaxDist = 45.0;

layout(std430, binding = 0) buffer Pos 
{
  vec4 Position[];
};

layout(std430, binding = 1) buffer Vel 
{
  vec4 Velocity[];
};

vec3 GetForce(vec3 p0, vec3 bodyPos, float Gravity)
{
	vec3 d = p0 - bodyPos;
	float dist = length(d);
	return (Gravity / pow(dist, 2.1)) * normalize(d);
}

void main() 
{
  uint idx = gl_GlobalInvocationID.x;

  vec3 p = Position[idx].xyz;
  vec3 vel = Velocity[idx].xyz;

  // Force from black hole #1
  float dist1 = length(BlackHolePos1 - p);
  vec3 force = GetForce(BlackHolePos1, p, Gravity1);
  // Force from black hole #2
  float dist2 = length(BlackHolePos2 - p);
  force += GetForce(BlackHolePos2, p, Gravity2);//(Gravity2 / dist2 / dist2) * normalize(d);
  	
	vec3 p1 = p +  Velocity[idx].xyz * DeltaT * 0.5;
	
	vec3 a = force * ParticleInvMass;
	vel += a * DeltaT * 0.5;
	
	force = GetForce(BlackHolePos1, p1, Gravity1);
	force += GetForce(BlackHolePos2, p1, Gravity2);
	a = force * ParticleInvMass;

    Position[idx] = vec4(p + vel * DeltaT, 1.0);
    Velocity[idx] = vec4(Velocity[idx].xyz + a * DeltaT, Velocity[idx].w);

  // Reset particles that get too far from the attractors
  const float div = 1.0;
  if( dist1 < 0.2 ) 
  {
  	Position[idx] = normalize(Position[idx]);
	Velocity[idx] = vec4(0.0);
	Velocity[idx].w = 0.5;
  } 
  else if( dist2 < 0.2 ) 
  {
  	Position[idx] = normalize(Position[idx]);
	Velocity[idx] = vec4(0.0);
	Velocity[idx].w = 1.0;
  }
  else if((dist1 + dist2)/2.0 > MaxDist)
  {
  
	Position[idx] = normalize(Position[idx]);
	Velocity[idx] = vec4(0.0);
  }
  else 
  {
    // Apply simple Euler integrator
//    vec3 a = force * ParticleInvMass;
//    Position[idx] = vec4(p + Velocity[idx].xyz * DeltaT + 0.5 * a * DeltaT * DeltaT, 1.0);
//    Velocity[idx] = vec4(Velocity[idx].xyz + a * DeltaT, Velocity[idx].w);
  }
}

#version 430
// compute shader for calculation of vortices velocity 
layout(local_size_x = 128) in;


uniform int vortexNumber;
uniform vec4 flowVelocity;
uniform int freeVortexNumber;
uniform int startFreeVortexNumber;

struct Vortex
{
	vec2 r;
	float gamma;
	float rankinRadius;
};

layout(std430, binding = 1) buffer vortexBuf 
{
	Vortex vortex[];
};

// velocity for RectangleFlow project;
layout(std430, binding = 11) buffer VortexVelocity 
{
	vec2 vortexVelocity[];
};

#define PI 3.1415926535
highp const float koef = 1.0/2.0/PI;

vec2 Velocity2D(vec2 r, Vortex vortex)
{

	highp vec2 dr = r - vortex.r;
	highp float dist = length(dr);
	highp float self = step(dist, vortex.rankinRadius);
	
	float selector = step(vortex.rankinRadius, dist);
	dist = selector * dist + (1 - selector) * vortex.rankinRadius;
	float vx = - koef * vortex.gamma * dr.y / (dist * dist);
	float vy =  koef * vortex.gamma * dr.x / (dist * dist);
	return vec2(  vx ,  vy );
}

void main() 
{
	uint idx = gl_GlobalInvocationID.x + startFreeVortexNumber;
	if(idx >= startFreeVortexNumber + freeVortexNumber)
			return;
	vec2 p = vortex[idx].r;
	highp vec2 velocity = vec2(0.0, 0.0);
	for(int i = 0; i < vortexNumber; i++)
	{
		velocity += Velocity2D(p, vortex[i]);
	}
	vortexVelocity[idx] = velocity + flowVelocity.xy;
}

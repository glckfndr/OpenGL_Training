#version 430 
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


uniform int RowLength;

//layout (std140, binding = 0) uniform InputBufferA 
//{
//    float a[];
//};
//layout(std430, binding = 0) buffer InputBufferA{float a[];};
//layout(std430, binding = 1) buffer InputBufferB{float b[];};
//layout(std430, binding = 2) buffer OutputBuffer{float c[];};
layout(std430, binding = 0) buffer InputBufferA{mat2 a[];};
layout(std430, binding = 1) buffer InputBufferB{vec2 b[];};
layout(std430, binding = 2) buffer OutputBuffer{vec2 c[];};
//layout(std430, binding = 1) buffer OutputBuffer{vec2 velocity[];};
//float A(uint i, uint j)
//{
//  return  a[i * RowLength + j]; 
//}
//
mat2 AA(uint i, uint j)
{
  return  a[i * RowLength + j]; 
}

uint i_j(uint i, uint j)
{
  return  i * RowLength + j; 
}


void main()
{
	
	uint index = gl_GlobalInvocationID.x;
	if(index >= RowLength)
	{
		return;
	}
	//float sum = 0.0;
	vec2 sum = vec2(0,0);
	for(int j = 0; j < RowLength; j++)
	{
		//sum += A(index, j) * b[j];
		sum += transpose(AA(index, j)) * b[j];
	}
	//sum = vec2(a[index][1]);
	//sum = transpose(a[0])*b[0];
	c[index] = sum;
}
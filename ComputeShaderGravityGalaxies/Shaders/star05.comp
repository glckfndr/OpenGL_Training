#version 430

layout( local_size_x = 1000 ) in;

uniform int numberStars = 1024;
uniform float DeltaT = 0.00;
uniform float Dist = 0.01;


layout(std430, binding = 0) buffer CoordData
{
  vec4 r[];
};

layout(std430, binding = 1) buffer CoordData05
{
  vec4 r05[];
};

layout(std430, binding = 2) buffer MassData
{
  float mass[];
};

layout(std430, binding = 3) buffer Velocity
{
  vec4 velocity[];
};

layout(std430, binding = 4) buffer Velocity05 
{
  vec4 velocity05[];
};

vec3 GetAcceleration(vec3 p)
{
	vec3 acc = vec3(0.0);
	float Dist3 = Dist*Dist*Dist;
		
	for(int i = 0; i < numberStars; i++)
	{
		vec3 d = r[i].xyz - p;
		float dist = length(d);
		float k = step(Dist, dist);
		float inverseDist = k / (dist * dist) + (1 - k) * dist / Dist3;
		acc += mass[i] * inverseDist * normalize(d);
	}
	return acc;
}

void main() 
{
  uint idx = gl_GlobalInvocationID.x;

  vec3 p = r[idx].xyz;
  vec3 vel = velocity[idx].xyz;

  r05[idx].xyz = p +  vel * DeltaT * 0.5;
  velocity05[idx].xyz = vel + GetAcceleration(p) * DeltaT * 0.5;
}
 
  
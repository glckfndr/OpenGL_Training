#version 430

layout( local_size_x = 64 ) in;
uniform float DeltaT = 0.001;
//uniform float ds = 0.01;
uniform int ringPointsNumber;
//uniform float ring1Radius;
//uniform float ring2Radius;

struct VortexPoint
{
        vec3 r;
        float gamma;
		//float dummy;
};

layout(std430, binding = 0) buffer ParticlesPosition
{
  vec4 particlePosition[];
};

layout(std430, binding = 1) buffer ParticleVelocity 
{
  vec4 particleVelocity[];
};

layout(std430, binding = 2) buffer VortexRing1 
{
  VortexPoint ring1Position[];
};

layout(std430, binding = 3) buffer VortexRing2 
{
  VortexPoint ring2Position[];
};

layout(std430, binding = 4) buffer StartPosition 
{
  vec4 startPosition[];
};

#define PI 3.14159265
const float koef = 1.0/4.0/PI;

vec3 BioSavar(vec3 r, vec3 start, vec3 dl, float gamma)
{ 
	vec3 a = r - start;
	vec3 b = a - dl;
	vec3 cros = cross(dl,a);
	float c = length(cros);
	if(c == 0.0)
	return vec3(0);
	return gamma* koef * cros  / (c * c) * (dot(dl, a) / length(a) - dot(dl, b) / length(b));
}

vec3 GetVelocity(vec3 p, VortexPoint point0, VortexPoint point1)
{
	vec3 r0 = point0.r.xyz;
	vec3 r1 = point1.r.xyz;
	float g = point0.gamma;
	return BioSavar(p, r0, r1 - r0, g);
}

void main() 
{
  uint idx = gl_GlobalInvocationID.x; 
  
  vec3 p = particlePosition[idx].xyz;
  vec3 velocity = vec3(0.0, 0.0, 0.0);
  for(int i = 0; i < ringPointsNumber; i++)
  {
	velocity += GetVelocity(p, ring1Position[i], ring1Position[i + 1]);
	velocity += GetVelocity(p, ring2Position[i], ring2Position[i + 1]);
  }
    
  vec3 p_old = p;
  p += velocity * DeltaT*0.5; 
  velocity = vec3(0.0, 0.0, 0.0);
  for(int i = 0; i < ringPointsNumber; i++)
  {
	velocity += GetVelocity(p, ring1Position[i], ring1Position[i + 1]);
	velocity += GetVelocity(p, ring2Position[i], ring2Position[i + 1]);
  }

	vec3 newPosition = p_old + velocity * DeltaT; 

	particleVelocity[idx] = vec4(velocity, 1);
	particlePosition[idx] = vec4(newPosition , 1);	
}

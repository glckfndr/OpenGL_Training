#version 430 
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

uniform int BufferSize;
layout(std430, binding = 0) buffer InputBufferA{vec4 vortex[];};
layout(std430, binding = 1) buffer OutputBuffer{vec4 velocity[];};

vec2 Velocity(vec2 r, vec4 vortex)
{
	vec2 dr = r - vortex.xy;
	float dist = length(dr);
	float selector = step(vortex.z, dist);
	dist = selector * dist + (1 - selector)*vortex.z;
	return vortex.w * vec2( -vortex.y, vortex.x)/(dist*dist);

}

void main()
{
	uint index = gl_GlobalInvocationID.x;
//	if(index >= BufferSize)
//	{
//		return;
//	}
	vec2 vel = vec2(0.0);
	for(int i = 0; i <  BufferSize; i++)
	{
		vel += Velocity(vortex[index].xy, vortex[i]);
	}
	velocity[index].xy = vel;
}
#version 430 
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
uniform int BufferSize;

struct Vortex 
{
	vec2 r;
	float gamma;
	float radius;
	//vec3 dummy0;
	//float dummy1;
};

int Step(float a, float x)
{
  return x >= a? 1: 0;
}

vec2 Velocity(vec2 r, Vortex vortex)
{
	vec2 dr = r - vortex.r;
	float dist = length(dr);
	int selector = Step(vortex.radius, dist);
	dist = selector * dist + (1 - selector)*vortex.radius;
	return vortex.gamma * vec2( -dr.y, dr.x)/(dist*dist);
}

layout(std430, binding = 0) buffer InputBufferA{Vortex vortex[];};
layout(std430, binding = 1) buffer OutputBuffer{vec2 velocity[];};

void main()
{
	uint index = gl_GlobalInvocationID.x;
//	if(index >= BufferSize)
//	{
//		return;
//	}
	vec2 vel = vec2(0.0);
	for(int i = 0; i <  BufferSize; i++)
	{
		vel += Velocity(vortex[index].r, vortex[i]);
	}
	velocity[index].xy = vel;
}